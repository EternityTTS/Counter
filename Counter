--Roach's additions
function roachLoad()
    lockStatus = true
    roachInd = 0
    lockButton()

end
function lockButton()
    self.createButton({
        click_function = "toggleLock",
        function_owner = self,
        label          = "Locked",
        position       = {-1.555,0.05,-0.745},
        rotation       = {0,0,0},
        scale          = {0.15,1,0.15},
        width          = 1025,
        height         = 1015,
        font_size      = 225,
        color          = {0,0,0},
        font_color     = {1,1,1},
        tooltip        = "Toggles if the text boxes are usable.",
    })
end

function toggleLock()
    if lockStatus then
        lockStatus = false
        self.editButton({
            index          = 0,
            label          = "Unlocked",
        })
    else
        lockStatus = true
        self.editButton({
            index          = 0,
            label          = "Locked",
        })
    end
end

function roachInput()
    self.editInput({index = roachInd-1, value=ref_buttonData.textbox[roachInd].value})
end

----

--[[    Character Sheet Template    by: MrStump

You can set up your own character sheet if you follow these steps.

Step 1) Change the character sheet image
    -Right click on the character sheet, click Custom
    -Replace the image URL with one for your character sheet
    -Click import, make sure your sheet loads
    -SAVE THE GAME (the table setup)
    -LOAD FROM THAT SAVE YOU JUST MADE

Step 2) Edit script to fit your character sheet
    -Below you will see some general options, and then the big data table
    -The data table is what determines how many of which buttons are made
        -Checkboxes
        -Counters
        -Textboxes
    -By default, there are 3 of each. You can add more or remove entries
    -If you intend to add/remove, be sure only to add/remove ENTRIES
        -This is what an entry looks like:
            {
                pos   = {-0.977,0.11,-0.589},
                size  = 800,
                state = false
            },
        -Deleting the whole thing would remove that specific item on the sheet
        -Copy and pasting it after another entry would create another
    -Each entry type has unique data points (pos, size, state, etc)
        -Do not try to add in your own data points or remove them individually
        -There is a summary of what each point does at the top of its category

Step 3) Save and check script changes
    -Hit Save & Apply in the script window to save your code
    -You can edit your code as needed and Save+Apply as often as needed
    -When you are finished, make disableSave = false below then Save+apply
        -This enables saving, so your sheet will remember whats on it.

Bonus) Finding/Editing Positions for elements
    I have included a tool to get positions for buttons in {x,y,z} form
    Place it where you want the center of your element to be
    Then copy the table from the notes (lower right of screen)
        You can highlight it and CTRL+C
    Paste it into the data table where needed (pos=)
    If you want to manually tweek the values:
        {0,0,0} is the center of the character sheet
        {1,0,0} is right, {-1,0,0} is left
        {0,0,-1} is up, {0,0,1} is down
        0.1 for Y is the height off of the page.
            If it was 0, it would be down inside the model of the sheet

Begin editing below:    ]]

offsetx = 0
offsetz = 0

--Set this to true while editing and false when you have finished
disableSave = true
--Remember to set this to false once you are done making changes
--Then, after you save & apply it, save your game too


--Change scale of button (Avoid changing if possible)
buttonScale = {0.1,0.1,0.1}

--This is the button placement information
defaultButtonData = {
    checkbox = {},
    counter = {
        {
            pos = {-0.12, 1.05, -0.12},
            size = 450,
            font_size = 400,
            value = 0,
            limit = 10,
            tab = 1,
            color = {1, 1, 1},
            font_color = {0, 0, 0},
            hideBG = true,
        },
    },
    textbox = {
        {
            pos = {1.09, 0.05, -0.74},
            rows = 1,
            width = 21250,
            font_size = 1400,
            label = "Name",
            value = "",
            alignment = 3,
            tab = 1,
            color = {1, 1, 1},
            font_color = {0, 0, 0},
        },
    },
}

        --End of textboxes




--Lua beyond this point, I recommend doing something more fun with your life



--Save function
function updateSave()
    saved_data = JSON.encode(ref_buttonData)
    if disableSave==true then saved_data="" end
    self.script_state = saved_data
end

--Startup procedure
function onload(saved_data)
    if disableSave == true then saved_data = "" end
    if saved_data ~= "" then
        local loaded_data = JSON.decode(saved_data)
        ref_buttonData = loaded_data
    else
        ref_buttonData = defaultButtonData
    end

    spawnedButtonCount = 1
    roachLoad()

    function createCheckbox()
    -- Assuming there's checkbox data to process
    for i, data in ipairs(ref_buttonData.checkbox) do
        -- Add further debug as needed
    end
end

    createCounter()
    createTextbox()
end





--Click functions for buttons



--Checks or unchecks the given box
function click_checkbox(tableIndex, buttonIndex)
    if ref_buttonData.checkbox[tableIndex].state == true then
        ref_buttonData.checkbox[tableIndex].state = false
        self.editButton({index=buttonIndex, label=""})
    else
        ref_buttonData.checkbox[tableIndex].state = true
        self.editButton({index=buttonIndex, label=string.char(10008)})
    end
    updateSave()
end

-- Save function
function updateSave()
    saved_data = JSON.encode(ref_buttonData)
    if disableSave == true then
        saved_data = ""
    end
    self.script_state = saved_data
end

-- Applies value to given counter display
function click_counter(tableIndex, operation)
    print("click_counter called with tableIndex: " .. tostring(tableIndex) .. " operation: " .. tostring(operation))

    if not tableIndex or not operation then
        print("Nil argument detected.")
        return
    end

    local counterData = ref_buttonData.counter[tableIndex]
    print("counterData:", counterData)

    if not counterData then
        print("counterData is nil for tableIndex:", tableIndex)
        return
    end

    local amount = 0

    if operation == "add" then
        amount = altKeyPressed and 5 or 1
    elseif operation == "subtract" then
        amount = altKeyPressed and -5 or -1
    else
        print("Unknown operation:", operation)
        return
    end

    print("Amount to change:", amount)

    counterData.value = counterData.value + amount

    if counterData.value >= counterData.limit then
        counterData.value = 0
    elseif counterData.value < 0 then
        counterData.value = counterData.limit - 1
    end

    print("New counter value:", counterData.value)

    -- Update the main display button label
    self.editButton({index = tableIndex, label = tostring(counterData.value)})
    updateSave()
end










--Updates saved value for given text box
function click_textbox(i, value, selected)
    if lockStatus and not selected then
        roachInd = i
        Wait.frames(roachInput, 10)
        return
    end
    if selected == false then
        ref_buttonData.textbox[i].value = value
        updateSave()
    end
end

--Dud function for if you have a background on a counter
function click_none() end



--Button creation



-- Makes counters
function createCounter()
    print("createCounter called")
    local spawnedButtonCount = 1

    for i, data in ipairs(ref_buttonData.counter) do
        print("Counter index:", i)
        if data then
            local size = data.size or 0
            if data.hideBG == true then size = 0 end

            -- Create the main display button
            self.createButton({
                label = tostring(data.value), -- Set the initial label to the counter value
                click_function = "click_none",
                function_owner = self,
                position = {data.pos[1], data.pos[2], data.pos[3] + 0.03},
                height = size,
                width = size,
                font_size = data.font_size,
                scale = data.scale,
                color = data.color,
                font_color = data.font_color,
            })
            spawnedButtonCount = spawnedButtonCount + 1

            -- Add button
            local funcNameAdd = "counterAdd" .. i
            local funcAdd = function(_, _, _)
                print("Add button clicked for counter:", i)
                click_counter(i, "add")
            end
            self.setVar(funcNameAdd, funcAdd)
            print("Function for Add set: ", funcNameAdd)

            local offsetDistance = (data.size / 2 + data.size / 4) * (buttonScale[1] * 0.0195)
            local posAdd = {data.pos[1] + offsetDistance + offsetx, data.pos[2], data.pos[3] + offsetz}
            local sizeAdd = data.size / 1.7

            self.createButton({
                label = "+",
                click_function = funcNameAdd,
                function_owner = self,
                position = posAdd,
                height = sizeAdd,
                width = sizeAdd,
                scale = data.scale,
                font_size = data.font_size,
                color = data.color,
                font_color = data.font_color,
            })
            spawnedButtonCount = spawnedButtonCount + 1

            -- Subtract button
            local funcNameSub = "counterSub" .. i
            local funcSub = function(_, _, _)
                print("Subtract button clicked for counter:", i)
                click_counter(i, "subtract")
            end
            self.setVar(funcNameSub, funcSub)
            print("Function for Subtract set: ", funcNameSub)

            local posSub = {data.pos[1] - offsetDistance - offsetx, data.pos[2], data.pos[3] - offsetz}
            local sizeSub = data.size / 1.7

            self.createButton({
                label = "-",
                click_function = funcNameSub,
                function_owner = self,
                position = posSub,
                height = sizeSub,
                width = sizeSub,
                scale = data.scale,
                font_size = data.font_size,
                color = data.color,
                font_color = data.font_color,
            })
            spawnedButtonCount = spawnedButtonCount + 1
        else
            print("Data for counter index " .. i .. " is nil.")
        end
    end
    print("createCounter completed")
end



function createTextbox()
    for i, data in ipairs(ref_buttonData.textbox) do
        --Sets up reference function
        local funcName = "textbox"..i
        local func = function(_,_,val,sel) click_textbox(i,val,sel) end
        self.setVar(funcName, func)

        self.createInput({
            input_function = funcName,
            function_owner = self,
            label          = data.label,
            alignment      = data.alignment,
            tab            = data.tab or 1,
            position       = {data.pos[1]+offsetx, data.pos[2]+0.001, data.pos[3]+offsetz},
            scale          = buttonScale,
            width          = data.width,
            height         = (data.font_size*data.rows)+24,
            font_size      = data.font_size,
            color          = data.color,
            font_color     = data.font_color,
            value          = data.value,
        })
    end
end
